<!--
Mock Bank Payment Link Generator
FILE: mock-bank-payment.html
USAGE: open this single HTML file in a browser (double-click) or host on GitHub Pages / Netlify.
PURPOSE: purely for demo/testing. DOES NOT process real payments.
-->
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Mock Bank Payment (Test Only)</title>
  <style>
    body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;max-width:900px;margin:24px auto;padding:12px}
    .card{border:1px solid #ddd;border-radius:12px;padding:16px;margin:12px 0;box-shadow:0 4px 14px rgba(0,0,0,0.03)}
    label{display:block;margin:8px 0 4px;font-weight:600}
    input,select,textarea{width:100%;padding:8px;border-radius:8px;border:1px solid #ccc}
    button{padding:10px 16px;border-radius:10px;border:0;cursor:pointer}
    .danger{background:#ffe6e6}
    .success{background:#e6ffe6}
    .muted{color:#666;font-size:0.9rem}
    .big{font-size:1.1rem}
    .kbd{background:#f3f3f3;padding:4px 8px;border-radius:6px}
    .center{text-align:center}
  </style>
</head>
<body>
  <h1>Mock Bank Payment Link Generator</h1>
  <div class="card">
    <p class="muted">This is a <strong>fake</strong> bank payment flow for testing/demo only. Do not use with real card data or attempt fraud. The page simulates a bank payment portal and redirects to the merchant's callback with a fake transaction result.</p>
    <form id="genForm">
      <label>Merchant Name</label>
      <input id="merchant" value="Demo Store" />

      <label>Amount (PHP)</label>
      <input id="amount" type="number" min="1" value="1500" />

      <label>Payer Name</label>
      <input id="payer" value="Juan Dela Cruz" />

      <label>Callback URL (where the merchant expects result)</label>
      <input id="callback" placeholder="https://your-site.example/payment-callback" />

      <label>Add Reference (optional)</label>
      <input id="ref" placeholder="ORDER12345" />

      <div style="display:flex;gap:8px;margin-top:12px">
        <button id="genBtn" type="button">Generate Payment Link</button>
        <button id="openBtn" type="button">Open Mock Payment Now</button>
      </div>
    </form>

    <div id="output" style="margin-top:12px;word-break:break-all"></div>
  </div>

  <div class="card" id="bankUI" style="display:none">
    <!-- This area renders when the page is opened with ?mockbank=1 and the required params -->
    <div id="bankContent"></div>
  </div>

  <script>
    const params = new URLSearchParams(location.search);
    const isBank = params.get('mockbank') === '1';

    function makeQuery(obj){
      const u = new URL(location.href.split('?')[0]);
      Object.keys(obj).forEach(k=>u.searchParams.set(k,obj[k]));
      return u.href;
    }

    // Generator UI
    document.getElementById('genBtn').addEventListener('click', ()=>{
      const merchant = encodeURIComponent(document.getElementById('merchant').value.trim());
      const amount = encodeURIComponent(document.getElementById('amount').value.trim());
      const payer = encodeURIComponent(document.getElementById('payer').value.trim());
      const callback = encodeURIComponent(document.getElementById('callback').value.trim() || '');
      const ref = encodeURIComponent(document.getElementById('ref').value.trim());

      if(!amount || Number(amount)<=0){
        alert('Enter a valid amount');
        return;
      }

      const link = makeQuery({mockbank:1, merchant, amount, payer, callback, ref});
      const out = document.getElementById('output');
      out.innerHTML = '<div class="card"><div class="muted">Mock payment link (share with tester):</div><div class="big">'+link+'</div><div style="margin-top:8px" class="muted">Open in a new tab to simulate the bank payment portal.</div></div>';
    });

    document.getElementById('openBtn').addEventListener('click', ()=>{
      const merchant = encodeURIComponent(document.getElementById('merchant').value.trim());
      const amount = encodeURIComponent(document.getElementById('amount').value.trim());
      const payer = encodeURIComponent(document.getElementById('payer').value.trim());
      const callback = encodeURIComponent(document.getElementById('callback').value.trim() || '');
      const ref = encodeURIComponent(document.getElementById('ref').value.trim());
      const link = makeQuery({mockbank:1, merchant, amount, payer, callback, ref});
      window.open(link, '_blank');
    });

    // If page is opened as mock bank UI, render bank flow
    if(isBank){
      document.getElementById('genForm').style.display = 'none';
      const bankCard = document.getElementById('bankUI');
      bankCard.style.display = 'block';
      const merchant = decodeURIComponent(params.get('merchant')||'Demo Store');
      const amount = decodeURIComponent(params.get('amount')||'0');
      const payer = decodeURIComponent(params.get('payer')||'');
      const callback = decodeURIComponent(params.get('callback')||'');
      const ref = decodeURIComponent(params.get('ref')||'');

      const html = `
        <h2 class="center">Mock Bank Payment Portal</h2>
        <p class="muted center">FOR TESTING ONLY — This simulates a bank's payment page.</p>
        <div style="padding:8px;border-radius:8px;border:1px dashed #ccc;margin-bottom:12px">
          <strong>Merchant:</strong> ${merchant}<br>
          <strong>Amount:</strong> ₱ ${amount}<br>
          <strong>Payer:</strong> ${payer}<br>
          <strong>Reference:</strong> ${ref || '(none)'}
        </div>

        <div style="margin-bottom:12px">
          <label>Choose outcome</label>
          <select id="outcome">
            <option value="success">Success (authorized)</option>
            <option value="failed">Failed (insufficient funds)</option>
            <option value="cancel">User Cancelled</option>
          </select>
        </div>

        <div style="margin-bottom:12px">
          <label>Security check (OTP)</label>
          <input id="otp" placeholder="enter 123456 to simulate success" />
        </div>

        <div style="display:flex;gap:8px">
          <button id="payBtn">Proceed</button>
          <button id="backBtn" class="danger">Back / Cancel</button>
        </div>

        <div id="result" style="margin-top:12px"></div>
      `;

      document.getElementById('bankContent').innerHTML = html;

      document.getElementById('payBtn').addEventListener('click', ()=>{
        const outcome = document.getElementById('outcome').value;
        const otp = document.getElementById('otp').value.trim();
        const resultDiv = document.getElementById('result');

        // Basic OTP gate for 'success' choice
        if(outcome === 'success' && otp !== '123456'){
          resultDiv.innerHTML = '<div class="card danger">Wrong OTP. Enter <span class="kbd">123456</span> to simulate success.</div>';
          return;
        }

        // Build fake transaction payload
        const txn = {
          tx_id: 'MOCKTX' + Math.floor(Math.random()*1000000),
          status: outcome === 'success' ? 'AUTHORIZED' : (outcome === 'failed' ? 'FAILED' : 'CANCELLED'),
          amount: amount,
          merchant: merchant,
          payer: payer,
          ref: ref,
          timestamp: new Date().toISOString()
        };

        // If merchant callback provided, redirect with query params
        if(callback){
          // build a signed-like query (fake signature) to simulate integrity check
          const q = new URL(callback);
          q.searchParams.set('tx_id', txn.tx_id);
          q.searchParams.set('status', txn.status);
          q.searchParams.set('amount', txn.amount);
          q.searchParams.set('ref', txn.ref);
          q.searchParams.set('time', txn.timestamp);
          // fake signature: base64 of tx_id|status
          const sig = btoa(txn.tx_id + '|' + txn.status);
          q.searchParams.set('signature', sig);

          resultDiv.innerHTML = '<div class="card success">Redirecting to merchant callback with fake result... If redirect blocked, copy-paste the link below.</div>';

          // allow a tiny delay so user sees the message
          setTimeout(()=>{
            location.href = q.href;
          }, 900);

        } else {
          resultDiv.innerHTML = '<div class="card">No callback provided. Transaction result:<pre>'+JSON.stringify(txn,null,2)+'</pre></div>';
        }
      });

      document.getElementById('backBtn').addEventListener('click', ()=>{
        history.back();
      });

    }
  </script>
</body>
</html>
